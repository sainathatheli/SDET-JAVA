Java hashCode() and equals() Methods
====================================
The hashCode() and equals() methods have been defined in Object class which is parent class for all java classes. For this reason, all java objects inherit a default implementation of these methods.

1. The hashCode() and equals() Methods
=======================================
equals(Object otherObject) – verifies the equality of two objects. It’s default implementation simply checks the object references of two objects to verify their equality. By default, two objects are equal if and only if they refer to the same memory location. Most Java classes override this method to provide their own comparison logic.

hashcode() – returns a unique integer value for the object in runtime. By default, Integer value is derived from the memory address of the object in the heap (but it’s not mandatory). The object’s hash code is used for determining the index location when this object needs to be stored in some HashTable like data structure.

1.1. Contract between hashCode() and equals()
==============================================
Overriding the the hashCode() is generally necessary whenever equals() is overridden to maintain the general contract for the hashCode() method, which states that equal objects must have equal hash codes.

Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode() must consistently return the same integer, provided no information used in equals comparisons on the object is modified.

This integer need not remain consistent between the two executions of the same application or program.

If two objects are equal according to the equals() method, then calling the hashCode() on each of the two objects must produce the same integer result.

It is not required that if two objects are unequal according to the equals(), then calling the hashCode() on each of the both objects must produce distinct integer results.

However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.


Best Practices to Follow
=========================
Always use the same fields to generate hashCode() and equals(). As in our case, we have used employee id.

The equals() must be consistent (if the objects are not modified, then it must keep returning the same value).

Whenever a.equals(b), then a.hashCode() must be same as b.hashCode().

If we override one method, then we should override the other method as well.